namespace Breezy.Core.Caching;

public static class IdentityQueryClass
{
    public const string Name = "IdentityQuery";
		
    public const string FullName = $"{BreezyGenerator.Namespace}.{Name}";
    
    public const string Content = $$"""
		// <auto-generated />
		using System;

		namespace {{BreezyGenerator.Namespace}};

		public class {{Name}} : IEquatable<{{Name}}>        
        {
            private readonly int _hashCodeSql;
            private readonly int? _hashCodeParam;
            public IdentityQuery(string sql, object? param = null) => (_hashCodeSql, _hashCodeParam) = (sql.GetHashCode(), param?.GetHashCode());
            public bool Equals({{Name}}? other)
            {
                if (ReferenceEquals(other, this)) return true;
                return this.GetHashCode() == other?.GetHashCode();
            }
            public override string ToString() 
                => $"{_hashCodeSql.ToString()}-{_hashCodeParam?.ToString()}";
            public override bool Equals(object? obj)      
                => Equals(obj as {{Name}});          
            public override int GetHashCode()         
                => HashCode.Combine(_hashCodeSql, _hashCodeParam);    
        }   
""";
}